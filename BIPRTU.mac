	.symlen 6
	SUBTTL	Common file for BASIC interpreter
	.SALL

CONTO	defl 15	; CHARACTER TO SUPRESS OUTPUT (USUALLY CONTROL-O)
DBLTRN	defl 0	; FOR DOUBLE PRECISION TRANSCENDENTALS
	IF2

	.printx	/EXTENDED/


	.printx	/LPT/

	.printx	/CPM DISK/


	.printx	/Z80/

	.printx	/FAST/

	.printx	/5.0 FEATURES/

	.printx	/ANSI COMPATIBLE/
	ENDIF

CLMWID	defl 14	; MAKE COMMA COLUMNS FOURTEEN CHARACTERS
DATPSC	defl 128	; NUMBER OF DATA BYTES IN DISK SECTOR
LINLN	defl 80	; TERMINAL LINE LENGTH
LPTLEN	defl 132
BUFLEN	defl 255	; LONG LINES
NAMLEN	defl 40	; MAXIMUM LENGTH NAME -- 3 TO 127

NUMLEV	defl 0*20+19+2*5	; NUMBER OF STACK LEVELS RESERVED
			; BY AN EXPLICIT CALL TO GETSTK

STRSIZ	defl 4

STRSIZ	defl 3
NUMTMP	defl 3	; NUMBER OF STRING TEMPORARIES

NUMTMP	defl 10

MD.RND	defl 3	; THE MODE NUMBER FOR RANDOM FILES
MD.SQI	defl 1	; THE MODE NUMBER FOR SEQUENTIAL INPUT FILES
			; NEVER WRITTEN INTO A FILE
MD.SQO	defl 2	; THE MODE FOR SEQUENTIAL OUTPUT FILES
			; AND PROGRAM FILES
CPMWRM	defl 0	; CP/M WARM BOOT ADDR
CPMENT	defl CPMWRM+5	; CP/M BDOS CALL ADDR
	CSEG
TRUROM	defl 0
	PAGE
	TITLE	BIPRTU BASIC Interpreter PRINT USING Driver/WHG
	SUBTTL	PRINT USING DRIVER
;
; COME HERE AFTER THE "USING" CLAUSE IN A PRINT STATEMENT
; IS RECOGNIZED. THE IDEA IS TO SCAN THE USING STRING UNTIL
; THE VALUE LIST IS EXHAUSTED, FINDING STRING AND NUMERIC
; FIELDS TO PRINT VALUES OUT OF THE LIST IN,
; AND JUST OUTPUTING ANY CHARACTERS THAT AREN'T PART OF
; A PRINT FIELD.
;
	EXTRN	CHRGTR,SYNCHR
	EXTRN	CHKSTR,CRDO,FACLO,FCERR,FRETM2,FRMCHK,FRMEVL
	EXTRN	OUTDO,PUFOUT,SNERR,STROUT,STRPRT,USFLG
	EXTRN	LEFTUS
	PUBLIC	PRINUS
CSTRNG	defl 5ch
CURNCY	defl 24h	; USE DOLLAR SIGN AS DEFAULT

PRINUS:	call	FRMCHK	; EVALUATE THE "USING" STRING
	call	CHKSTR	; MAKE SURE IT IS A STRING
	call	SYNCHR
	defb	3bh	; MUST BE DELIMITED BY A SEMI-COLON
	ex	de,hl		; [D,E]=TEXT POINTER
	ld	hl,(FACLO)	; GET POINTER TO "USING" STRING DESCRIPTOR
	jp	INIUS	; DONT POP OFF OR LOOK AT USFLG
REUSST:	ld	a,(USFLG)	; DID WE PRINT OUT A VALUE LAST SCAN?
	or	a	; SET CC'S
	jp	z,FCERR3	; NO, GIVE ERROR
	pop	de	; [D,E]=POINTER TO "USING" STRING DESCRIPTOR
	ex	de,hl		; [D,E]=TEXT POINTER
INIUS:	push	hl	; SAVE THE POINTER TO "USING" STRING DESCRIPTOR
	xor	a	; INITIALLY INDICATE THERE ARE MORE
			; VALUES IN THE VALUE LIST
	ld	(USFLG),a	; RESET THE FLAG THAT SAYS VALUES PRINTED
	cp	d	; TURN THE ZERO FLAG OFF
			; TO INDICATE THE VALUE LIST HASN'T ENDED
	push	af	; SAVE FLAG INDICATING WHETHER THE VALUE
			; LIST HAS ENDED
	push	de	; SAVE THE TEXT POINTER INTO THE VALUE LIST
	ld	b,(hl)	; [B]=LENGTH OF THE "USING" STRING
	or	b	; SEE IF ITS ZERO
FCERR3:	jp	z,FCERR	; IF SO, "ILLEGAL FUNCTION CALL"
	inc	hl	; [H,L]=POINTER AT THE "USING" STRING'S
	ld	c,(hl)	; DATA
	inc	hl
	ld	h,(hl)
	ld	l,c
	jp	PRCCHR	; GO INTO THE LOOP TO SCAN
			; THE "USING" STRING
BGSTRF:	ld	e,b	; SAVE THE "USING" STRING CHARACTER COUNT
	push	hl	; SAVE THE POINTER INTO THE "USING" STRING
	ld	c,2	; THE \\ STRING FIELD HAS 2 PLUS
			; NUMBER OF ENCLOSED SPACES WIDTH
LPSTRF:	ld	a,(hl)	; GET THE NEXT CHARACTER
	inc	hl	; ADVANCE THE POINTER AT THE "USING" STRING
			; DATA
	cp	CSTRNG	; THE FIELD TERMINATOR?
	jp	z,ISSTRF	; GO EVALUATE A STRING AND PRINT
	cp	' '	; A FIELD EXTENDER?
	jp	nz,NOSTRF	; IF NOT, ITS NOT A STRING FIELD
	inc	c	; INCREMENT THE FIELD WIDTH
			; SEE IF THERE ARE MORE CHARACTERS
	dec	b
	jp	nz,LPSTRF	; KEEP SCANNING FOR THE FIELD TERMINATOR
;
; SINCE  STRING FIELD WASN'T FOUND, THE "USING" STRING 
; CHARACTER COUNT AND THE POINTER INTO IT'S DATA MUST
; BE RESTORED AND THE "\" PRINTED
;
NOSTRF:	pop	hl	; RESTORE THE POINTER INTO "USING" STRING'S DATA
	ld	b,e	; RESTORE THE "USING" STRING CHARACTER COUNT
	ld	a,CSTRNG	; RESTORE THE CHARACTER
;
; HERE TO PRINT THE CHARACTER IN [A] SINCE IT WASN'T PART OF ANY FIELD
;
NEWUCH:	call	PLSPRT	; IF A "+" CAME BEFORE THIS CHARACTER
			; MAKE SURE IT GETS PRINTED
	call	OUTDO	; PRINT THE CHARACTER THAT WASN'T
			; PART OF A FIELD
PRCCHR:	xor	a	; SET [D,E]=0 SO IF WE DISPATCH
	ld	e,a	; SOME FLAGS ARE ALREADY ZEROED
	ld	d,a	; DON'T PRINT "+" TWICE
PLSFIN:	call	PLSPRT	; ALLOW FOR MULTIPLE PLUSES
			; IN A ROW
	ld	d,a	; SET "+" FLAG
	ld	a,(hl)	; GET A NEW CHARACTER
	inc	hl
	cp	'!'	; CHECK FOR A SINGLE CHARACTER
	jp	z,SMSTRF	; STRING FIELD
	cp	'#'	; CHECK FOR THE START OF A NUMERIC FIELD
	jp	z,NUMNUM	; GO SCAN IT
	cp	'&'	; SEE IF ITS A VARIABLE LENGTH STRING FIELD
	jp	z,VARSTR	; GO PRINT ENTIRE STRING
	dec	b	; ALL THE OTHER POSSIBILITIES
			; REQUIRE AT LEAST 2 CHARACTERS
	jp	z,REUSIN	; IF THE VALUE LIST IS NOT EXHAUSTED
			; GO REUSE "USING" STRING
	cp	'+'	; A LEADING "+" ?
	ld	a,8	; SETUP [D] WITH THE PLUS-FLAG ON IN
	jp	z,PLSFIN	; CASE A NUMERIC FIELD STARTS
	dec	hl	; POINTER HAS ALREADY BEEN INCREMENTED
	ld	a,(hl)	; GET BACK THE CURRENT CHARACTER
	inc	hl	; REINCREMENT THE POINTER
	cp	'.'	; NUMERIC FIELD WITH TRAILING DIGITS
	jp	z,DOTNUM	; IF SO GO SCAN WITH [E]=
			; NUMBER OF DIGITS BEFORE THE "."=0
	cp	'_'	; CHECK FOR LITERAL CHARACTER DECLARATION
	jp	z,LITCHR
	cp	CSTRNG	; CHECK FOR A BIG STRING FIELD STARTER
	jp	z,BGSTRF	; GO SEE IF IT REALLY IS A STRING FIELD
	cp	(hl)	; SEE IF THE NEXT CHARACTER MATCHES THE
			; CURRENT ONE
	jp	nz,NEWUCH	; IF NOT, CAN'T HAVE $$ OR ** SO ALL THE
			; POSSIBILITIES ARE EXHAUSTED
	cp	CURNCY	; IS IT $$ ?
	jp	z,DOLRNM	; GO SET UP THE FLAG BIT
	cp	'*'	; IS IT ** ?
	jp	nz,NEWUCH	; IF NOT, ITS NOT PART
			; OF A FIELD SINCE ALL THE POSSIBILITIES
			; HAVE BEEN TRIED
	ld	a,b	; SEE IF THE "USING" STRING IS LONG
	inc	hl	; CHECK FOR $
	cp	2	; ENOUGH FOR THE SPECIAL CASE OF
	jp	c,NOTSPC	;  **$
	ld	a,(hl)
	cp	CURNCY	; IS THE NEXT CHARACTER $ ?
NOTSPC:	ld	a,32	; SET THE ASTERISK BIT
	jp	nz,SPCNUM	; IF IT NOT THE SPECIAL CASE, DON'T
			; SET THE DOLLAR SIGN FLAG
	dec	b	; DECREMENT THE "USING" STRING CHARACTER COUNT
			; TO TAKE THE $ INTO CONSIDERATION
	inc	e	; INCREMENT THE FIELD WIDTH FOR THE
			; FLOATING DOLLAR SIGN
	defb	00feh	; "CPI" OVER THE NEXT BYTE
			; MVI SI, IN 8086
DOLRNM:	xor	a	; CLEAR [A]
	add	a,16	; SET BIT FOR FLOATING DOLLAR SIGN FLAG
	inc	hl	; POINT BEYOND THE SPECIAL CHARACTERS
SPCNUM:	inc	e	; SINCE TWO CHARACTERS SPECIFY
			; THE FIELD SIZE, INITIALIZE [E]=1
	add	a,d	; PUT NEW FLAG BITS IN [A]
	ld	d,a	; INTO [D]. THE PLUS FLAG MAY HAVE
			; ALREADY BEEN SET
NUMNUM:	inc	e	; INCREMENT THE NUMBER OF DIGITS BEFORE
			; THE DECIMAL POINT
	ld	c,0	; SET THE NUMBER OF DIGITS AFTER
			; THE DECIMAL POINT = 0
	dec	b	; SEE IF THERE ARE MORE CHARACTERS
	jp	z,ENDNUS	; IF NOT, WE ARE DONE SCANNING THIS
			; NUMERIC FIELD
	ld	a,(hl)	; GET THE NEW CHARACTER
	inc	hl	; ADVANCE THE POINTER AT THE "USING" STRING DATA
	cp	'.'	; DO WE HAVE TRAILING DIGITS?
	jp	z,AFTDOT	; IF SO, USE SPECIAL SCAN LOOP
	cp	'#'	; MORE LEADING DIGITS ?
	jp	z,NUMNUM	; INCREMENT THE COUNT AND KEEP SCANNING
	cp	2ch	; DOES HE WANT A COMMA
			; EVERY THREE DIGITS?
	jp	nz,FINNUM	; NO MORE LEADING DIGITS, CHECK FOR ^^^
	ld	a,d	; TURN ON THE COMMA BIT
	or	64
	ld	d,a
	jp	NUMNUM	; GO SCAN SOME MORE
;
; HERE WHEN A "." IS SEEN IN THE "USING" STRING
; IT STARTS A NUMERIC FIELD IF AND ONLY IF
; IT IS FOLLOWED BY A "#"
;
DOTNUM:	ld	a,(hl)	; GET THE CHARACTER THAT FOLLOWS
	cp	'#'	; IS THIS A NUMERIC FIELD?
	ld	a,'.'	; IF NOT, GO BACK AND PRINT "."
	jp	nz,NEWUCH
	ld	c,1	; INITIALIZE THE NUMBER OF
			; DIGITS AFTER THE DECIMAL POINT
	inc	hl
AFTDOT:	inc	c	; INCREMENT THE NUMBER OF DIGITS
			; AFTER THE DECIMAL POINT
	dec	b	; SEE IF THE "USING" STRING HAS MORE
	jp	z,ENDNUS	; CHARACTERS, AND IF NOT, STOP SCANNING
	ld	a,(hl)	; GET THE NEXT CHARACTER
	inc	hl
	cp	'#'	; MORE DIGITS AFTER THE DECIMAL POINT?
	jp	z,AFTDOT	; IF SO, INCREMENT THE COUNT AND KEEP
			; SCANNING
;
; CHECK FOR THE "^^^^" THAT INDICATES SCIENTIFIC NOTATION
;
FINNUM:	push	de	; SAVE [D]=FLAGS AND [E]=LEADING DIGITS
	ld	de,NOTSCI	; PLACE TO GO IF ITS NOT SCIENTIFIC
	push	de	; NOTATION
	ld	d,h	; REMEMBER [H,L] IN CASE
	ld	e,l	; ITS NOT SCIENTIFIC NOTATION
	cp	'^'	; IS THE FIRST CHARACTER "^" ?
	ret	nz
	cp	(hl)	; IS THE SECOND CHARACTER "^" ?
	ret	nz
	inc	hl
	cp	(hl)	; IS THE THIRD CHARACTER "^" ?
	ret	nz
	inc	hl
	cp	(hl)	; IS THE FOURTH CHARACTER "^" ?
	ret	nz
	inc	hl
	ld	a,b	; WERE THERE ENOUGH CHARACTERS FOR "^^^^"
	sub	4	; IT TAKES FOUR
	ret	c
	pop	de	; POP OFF THE NOTSCI RETURN ADDRESS
	pop	de	; GET BACK [D]=FLAGS [E]=LEADING DIGITS
	ld	b,a	; MAKE [B]=NEW CHARACTER COUNT
	inc	d	; TURN ON THE SCIENTIFIC NOTATION FLAG
	inc	hl
	defb	0cah	; SKIP THE NEXT TWO BYTES WITH "JZ"
NOTSCI:	ex	de,hl		; RESTORE THE OLD [H,L]
	pop	de	; GET BACK [D]=FLAGS [E]=LEADING DIGITS
ENDNUS:	ld	a,d	; IF THE LEADING PLUS FLAG IS ON
	dec	hl
	inc	e	; INCLUDE LEADING "+" IN NUMBER OF DIGITS
	and	8	; DON'T CHECK FOR A TRAILING SIGN
	jp	nz,ENDNUM	; ALL DONE WITH THE FIELD IF SO
			; IF THERE IS A LEADING PLUS
	dec	e	; NO LEADING PLUS SO DON'T INCREMENT THE
			; NUMBER OF DIGITS BEFORE THE DECIMAL POINT
	ld	a,b
	or	a	; SEE IF THERE ARE MORE CHARACTERS
	jp	z,ENDNUM	; IF NOT, STOP SCANNING
	ld	a,(hl)	; GET THE CURRENT CHARACTER
	sub	'-'	; TRAIL MINUS?
	jp	z,SGNTRL	; SET THE TRAILING SIGN FLAG
	cp	'+'-'-'	; A TRAILING PLUS?
	jp	nz,ENDNUM	; IF NOT, WE ARE DONE SCANNING
	ld	a,8	; TURN ON THE POSITIVE="+" FLAG
SGNTRL:	add	a,4	; TURN ON THE TRAILING SIGN FLAG
	add	a,d	; INCLUDE WITH OLD FLAGS
	ld	d,a
	dec	b	; DECREMENT THE "USING" STRING CHARACTER
			; COUNT TO ACCOUNT FOR THE TRAILING SIGN
ENDNUM:	pop	hl	; [H,L]=THE OLD TEXT POINTER
	pop	af	; POP OFF FLAG THAT SAYS WHETHER THERE
			; ARE MORE VALUES IN THE VALUE LIST
	jp	z,FLDFIN	; IF NOT, WE ARE DONE WITH THE "PRINT"
	push	bc	; SAVE [B]=# OF CHARACTERS REMAINING IN
			; "USING" STRING AND [C]=TRAILING DIGITS
	push	de	; SAVE [D]=FLAGS AND [E]=LEADING DIGITS
	call	FRMEVL	; READ A VALUE FROM THE VALUE LIST
	pop	de	; [D]=FLAGS & [E]=# OF LEADING DIGITS
	pop	bc	; [B]=# CHARACTER LEFT IN "USING" STRING
			; [C]=NUMBER OF TRAILING DIGITS
	push	bc	; SAVE [B] FOR ENTERING SCAN AGAIN
	push	hl	; SAVE THE TEXT POINTER
	ld	b,e	; [B]=# OF LEADING DIGITS
	ld	a,b	; MAKE SURE THE TOTAL NUMBER OF DIGITS
	add	a,c	; DOES NOT EXCEED TWENTY-FOUR
	cp	25
	jp	nc,FCERR	; IF SO, "ILLEGAL FUNCTION CALL"
	ld	a,d	; [A]=FLAG BITS
	or	128	; TURN ON THE "USING" BIT
	call	PUFOUT	; PRINT THE VALUE
	call	STROUT	; ACTUALLY PRINT IT
FNSTRF:	pop	hl	; GET BACK THE TEXT POINTER
	dec	hl	; SEE WHAT THE TERMINATOR WAS
	call	CHRGTR
	scf		; SET FLAG THAT CRLF IS DESIRED
	jp	z,CRDNUS	; IF IT WAS A END-OF-STATEMENT
			; FLAG THAT THE VALUE LIST ENDED
			; AND THAT CRLF SHOULD BE PRINTED
	ld	(USFLG),a	; FLAG THAT VALUE HAS BEEN PRINTED.
			; DOESNT MATTER IF ZERO SET, [A]
			; MUST BE NON-ZERO OTHERWISE
	cp	3bh	; A SEMI-COLON?
	jp	z,SEMUSN	; A LEGAL DELIMITER
	cp	2ch	; A COMMA ?
	jp	nz,SNERR	; THE DELIMETER WAS ILLEGAL
SEMUSN:	call	CHRGTR	; IS THERE ANOTHER VALUE?
CRDNUS:	pop	bc	; [B]=CHARACTERS REMAINING IN "USING" STRING
	ex	de,hl		; [D,E]=TEXT POINTER
	pop	hl	; [H,L]=POINT AT THE "USING" STRING
	push	hl	; DESCRIPTOR. RESAVE IT.
	push	af	; SAVE THE FLAG THAT INDICATES
			; WHETHER OR NOT THE VALUE LIST TERMINATED
	push	de	; SAVE THE TEXT POINTER
;
; SINCE FRMEVL MAY HAVE FORCED GARBAGE COLLECTION
; WE HAVE TO USE THE NUMBER OF CHARACTERS ALREADY SCANNED
; AS AN OFFSET TO THE POINTER TO THE "USING" STRING'S DATA
; TO GET A NEW POINTER TO THE REST OF THE CHARACTERS TO
; BE SCANNED
;
	ld	a,(hl)	; GET THE "USING" STRING'S LENGTH
	sub	b	; SUBTRACT THE NUMBER OF CHARACTERS
			; ALREADY SCANNED
	inc	hl	; [H,L]=POINTER AT
	ld	c,(hl)	; THE "USING" STRING'S
	inc	hl	; STRING DATA
	ld	h,(hl)
	ld	l,c
	ld	d,0	; SETUP [D,E] AS A DOUBLE BYTE OFFSET
	ld	e,a
	add	hl,de	; ADD ON THE OFFSET TO GET
			; THE NEW POINTER
CHKUSI:	ld	a,b	; [A]=THE NUMBER OF CHARACTERS LEFT TO SCAN
	or	a	; SEE IF THERE ARE ANY LEFT
	jp	nz,PRCCHR	; IF SO, KEEP SCANNING
	jp	FINUSI	; SEE IF THERE ARE MORE VALUES
REUSIN:	call	PLSPRT	; PRINT A "+" IF NECESSARY
	call	OUTDO	; PRINT THE FINAL CHARACTER
FINUSI:	pop	hl	; POP OFF THE TEXT POINTER
	pop	af	; POP OFF THE INDICATOR OF WHETHER OR NOT
			; THE VALUE LIST HAS ENDED
	jp	nz,REUSST	; IF NOT, REUSE THE "USING" STRING
FLDFIN:	call	c,CRDO	; IF NOT COMMA OR SEMI-COLON
			; ENDED THE VALUE LIST
			; PRINT A CRLF
	ex	(sp),hl		; SAVE THE TEXT POINTER
			; [H,L]=POINT AT THE "USING" STRING'S
			; DESCRIPTOR
	call	FRETM2	; FINALLY FREE IT UP
	pop	hl	; GET BACK THE TEXT POINTER
	EXTRN	FINPRT
	jp	FINPRT	; ZERO [PTRFIL]
;
; HERE TO HANDLE A LITERAL CHARACTER IN THE USING STRING PRECEDED
; BY "_"
;
LITCHR:	call	PLSPRT	; PRINT PREVIOUS "+" IF ANY
	dec	b	; DECREMENT COUNT FOR ACTUAL CHARACTER
	ld	a,(hl)	; FETCH LITERAL CHARACTER
	inc	hl
	call	OUTDO	; OUTPUT LITERAL CHARACTER
	jp	CHKUSI	; GO SEE IF USING STRING ENDED
;
; HERE TO HANDLE VARIABLE LENGTH STRING FIELD SPECIFIED WITH "&"
;
VARSTR:	ld	c,255	; SET LENGTH TO MAXIMUM POSSIBLE
	jp	ISSTR1
;
; HERE WHEN THE "!" INDICATING A SINGLE CHARACTER
; STRING FIELD HAS BEEN SCANNED
;
SMSTRF:	ld	c,1	; SET THE FIELD WIDTH TO 1
	defb	003eh	; SKIP NEXT BYTE WITH A "MVI A,"
ISSTRF:	pop	af	; GET RID OF THE [H,L] THAT WAS BEING
			; SAVED IN CASE THIS WASN'T A STRING FIELD
ISSTR1:	dec	b	; DECREMENT THE "USING" STRING CHARACTER COUNT
	call	PLSPRT	; PRINT A "+" IF ONE CAME BEFORE THE FIELD
	pop	hl	; TAKE OFF THE TEXT POINTER
	pop	af	; TAKE OF THE FLAG WHICH SAYS
			; WHETHER THERE ARE MORE VALUES IN THE
			; VALUE LIST
	jp	z,FLDFIN	; IF THERE ARE NO MORE VALUES
			; THEN WE ARE DONE
	push	bc	; SAVE [B]=NUMBER OF CHARACTERS YET TO
			; BE SCANNED IN "USING" STRING
	call	FRMEVL	; READ A VALUE
	call	CHKSTR	; MAKE SURE ITS A STRING
	pop	bc	; [C]=FIELD WIDTH
	push	bc	; RESAVE [B]
	push	hl	; SAVE THE TEXT POINTER
	ld	hl,(FACLO)	; GET A POINTER TO THE DESCRIPTOR
	ld	b,c	; [B]=FIELD WIDTH
	ld	c,0	; SET UP FOR "LEFT$"
	push	bc	; SAVE THE FIELD WIDTH FOR SPACE PADDING
	call	LEFTUS	; TRUNCATE THE STRING TO [B] CHARACTERS
	call	STRPRT	; PRINT THE STRING
	ld	hl,(FACLO)	; SEE IF IT NEEDS TO BE PADDED
	pop	af	; [A]=FIELD WIDTH
	inc	a	; IF FIELD LENGTH IS 255 MUST BE "&" SO
	jp	z,FNSTRF	; DONT PRINT ANY TRAILING SPACES
	dec	a
	sub	(hl)	; [A]=AMOUNT OF PADDING NEEDED
	ld	b,a
	ld	a,' '	; SETUP THE PRINT CHARACTER
	inc	b	; DUMMY INCREMENT OF NUMBER OF SPACES
UPRTSP:	dec	b	; SEE IF MORE SPACES
	jp	z,FNSTRF	; NO, GO SEE IF THE VALUE LIST ENDED AND
			; RESUME SCANNING
	call	OUTDO	; PRINT A SPACE
	jp	UPRTSP	; AND LOOP PRINTING THEM
;
; WHEN A "+" IS DETECTED IN THE "USING" STRING
; IF A NUMERIC FIELD FOLLOWS A BIT IN [D] SHOULD
; BE SET, OTHERWISE "+" SHOULD BE PRINTED.
; SINCE DECIDING WHETHER A NUMERIC FIELD FOLLOWS IS VERY
; DIFFICULT, THE BIT IS ALWAYS SET IN [D].
; AT THE POINT IT IS DECIDED A CHARACTER IS NOT PART
; OF A NUMERIC FIELD, THIS ROUTINE IS CALLED TO SEE
; IF THE BIT IN [D] IS SET, WHICH MEANS
; A PLUS PRECEDED THE CHARACTER AND SHOULD BE
; PRINTED.
;
PLSPRT:	push	af	; SAVE THE CURRENT CHARACTER
	ld	a,d	; CHECK THE PLUS BIT
	or	a	; SINCE IT IS THE ONLY THING THAT COULD
			; BE TURNED ON
	ld	a,'+'	; SETUP TO PRINT THE PLUS
	call	nz,OUTDO	; PRINT IT IF THE BIT WAS SET
	pop	af	; GET BACK THE CURRENT CHARACTER
	ret
	end

